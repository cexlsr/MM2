local isKeyMenuOpen = false -- Flag to track if the key menu is open

function MakeWindow(Configs)
  if isKeyMenuOpen then return end -- Prevent opening another window if one is already open
  isKeyMenuOpen = true -- Set the flag to true when the window opens

  -- Only proceed if the Key System is enabled
  if not Configs.Key.KeySystem then
    isKeyMenuOpen = false
    return -- Exit if Key System is not enabled
  end

  local title = Configs.Hub.Title or "REDz HUB" -- This line does not open a new window
  local Anim_Title = Configs.Hub.Animation or "by : redz9999"

  -- Key system configuration
  local KeyTitle = Configs.Key.Title or "Key System"
  local KeyDescription = Configs.Key.Description or ".-."
  local KeyKey = Configs.Key.Keys or {"123", "321"}
  local KeyLink = Configs.Key.KeyLink or ""
  local KeyNotifications = Configs.Key.Notifi.Notifications or true
  local KeyNotSuccess = Configs.Key.Notifi.Incorrectkey or "The key is incorrect"
  local KeySuccess = Configs.Key.Notifi.CorrectKey or "Running the Script..."
  local KeyCopyKeyLink = Configs.Key.Notifi.CopyKeyLink or "Copied to Clipboard"

  -- Create the key menu frame
  local KeyMenu = Create("Frame", ScreenGui, {
    Size = UDim2.new(0, 400, 0, 220),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    BackgroundColor3 = Configs_HUB.Cor_Hub,
    AnchorPoint = Vector2.new(0.5, 0.5),
    Active = true,
    Draggable = true
  }) Corner(KeyMenu)

  -- Close button
  local CloseButton = Create("TextButton", KeyMenu, {
    Size = UDim2.new(0, 30, 0, 30),
    Position = UDim2.new(1, -10, 0, 5),
    AnchorPoint = Vector2.new(1, 0),
    Text = "X",
    Font = Enum.Font.FredokaOne,
    TextScaled = true,
    TextColor3 = Color3.fromRGB(240, 0, 0),
    BackgroundTransparency = 1,
  }) Corner(CloseButton)

  -- Title and description setup
  local Title = Create("TextLabel", KeyMenu, {
    Size = UDim2.new(1, -80, 0, 20),
    Position = UDim2.new(0, 20, 0, 5),
    Text = KeyTitle,
    Font = Configs_HUB.Text_Font,
    TextScaled = true,
    TextColor3 = Configs_HUB.Cor_Text,
    TextXAlignment = "Left",
    BackgroundTransparency = 1
  })

  local Description = Create("TextLabel", KeyMenu, {
    Size = UDim2.new(1, -80, 0, 0),
    Text = KeyDescription,
    TextSize = 17,
    TextColor3 = Configs_HUB.Cor_DarkText,
    Font = Configs_HUB.Text_Font,
    Position = UDim2.new(0, 20, 0, 25),
    TextXAlignment = "Left",
    AutomaticSize = "Y",
    TextYAlignment = "Top",
    BackgroundTransparency = 1
  })

  -- Confirm and Get Key Link buttons
  local ConfirmButton = Create("TextButton", KeyMenu, {
    Text = "Confirm",
    Font = Configs_HUB.Text_Font,
    TextSize = 20,
    TextColor3 = Configs_HUB.Cor_Text,
    Size = UDim2.new(0, 150, 0, 40),
    AnchorPoint = Vector2.new(1, 0),
    Position = UDim2.new(1, -35, 0, 140),
    BackgroundColor3 = Configs_HUB.Cor_Options
  }) Corner(ConfirmButton)

  local GetKeyLink = Create("TextButton", KeyMenu, {
    Text = "Get Key Link",
    Font = Configs_HUB.Text_Font,
    TextSize = 20,
    TextColor3 = Configs_HUB.Cor_Text,
    Size = UDim2.new(0, 150, 0, 40),
    Position = UDim2.new(0, 35, 0, 140),
    BackgroundColor3 = Configs_HUB.Cor_Options
  }) Corner(GetKeyLink)

  local TextBox = Create("TextBox", KeyMenu, {
    Size = UDim2.new(1, -70, 0, 40),
    Position = UDim2.new(0, 35, 0, 90),
    BackgroundColor3 = Configs_HUB.Cor_Options,
    PlaceholderText = "Put the Key here",
    Text = "",
    TextColor3 = Configs_HUB.Cor_Text,
    Font = Configs_HUB.Text_Font,
    TextSize = 25
  }) Corner(TextBox)

  local KeyVerify = false
  CloseButton.MouseButton1Click:Connect(function()
    isKeyMenuOpen = false -- Reset the flag when the window closes
    local UIScale = Create("UIScale", ScreenGui)
    CreateTween(UIScale, "Scale", 0, 0.20, true)
    KeyMenu:Destroy()
  end)

  ConfirmButton.MouseButton1Click:Connect(function()
    for _,v in pairs(KeyKey) do
      if TextBox.Text == v then
        KeyVerify = true
      end
    end
    if KeyNotifications and not KeyVerify then
      MakeNotifi({
        Title = KeyTitle,
        Text = KeyNotSuccess,
        Time = 5
      })
    elseif KeyNotifications then
      MakeNotifi({
        Title = KeyTitle,
        Text = KeySuccess,
        Time = 5
      })
      isKeyMenuOpen = false -- Reset the flag after successful verification
    end
  end)

  GetKeyLink.MouseButton1Click:Connect(function()
    if KeyNotifications then
      setclipboard(KeyLink)
      MakeNotifi({
        Title = KeyTitle,
        Text = KeyCopyKeyLink,
        Time = 5
      })
    end
  end)

  repeat task.wait() until KeyVerify
  local UIScale = Create("UIScale", KeyMenu)
  CreateTween(UIScale, "Scale", 0, 0.40, true)
  KeyMenu:Destroy()
  isKeyMenuOpen = false -- Reset the flag after the key has been verified
end
